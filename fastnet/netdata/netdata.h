/** 
@file  netdata.h
@brief NetData class declaration.
*/

#ifndef NETDATA_H
#define NETDATA_H

#include <vector>

#include "fastnet/defines.h"

using namespace std;


namespace FastNet
{
	/**
		@brief		Base class for neural network's data.
		@author		Rodrigo Coura Torres (torres@lps.ufrj.br)
		@version	1.0
		@date		14/11/2004

		This class is a virtual base class used for managing the neural network data generated
		during training. This class provides method for reading/writing weights,
		errors and output generated. Since it is a virtual base class, it is necessary to create
		and inherited class that will actually implement these methods. Doing so, the data
		can be transferred to/from any kind of place (disk files, network, memory, etc), and
		since the neural network will call the methods through this class, for it, the place
		where this data is being read/writen is inrelevant.
	*/
	class NetData
	{
		protected:
			//Class attributes.

			/// Number of layers (including the input layer).
			/**
			 This attribute holds the number of layer that the network that will use this class
			 has. This value must considerate the input layer, so, if a network is of type
			 20-15-4, this attribute must be 3. It must be exactly the same as the neural network
			 being used.
			*/
			unsigned nLayers;

			/// Store the number of nodes in each layer (including the input layer).
			/**
			This vector must contains the number of nodes in each layer, including the input layer. So,
			for intance, a network of type 4-3-1, the nNodes will contain the values, 4,3 and 1, respectively.
			It must be exactly the same as the neural network
			being used.
			*/
			unsigned *nNodes;

		public:

			/// Class constructor.
			/**
			 This constructor initializes the nNodes and nLayers attributes,
			 so the class will have, after this method, the network topology,
			 in order to correctly read/write data.
			 @param[in] nodesDist A vector containing the number of nodes in each layer (including the input layer).
			 @throw bad_alloc in case of error allocating memory.
			*/
			NetData(vector<unsigned> &nodesDist)
			{
				nNodes = NULL;
				nLayers = nodesDist.size();

				try
				{
					nNodes = new unsigned [nLayers];
					for (unsigned i=0; i<nLayers; i++) nNodes[i] = nodesDist[i];
				}
				catch (bad_alloc xa)
				{
					throw;
				}
			}
			

			/// Class destructor.
			/**
			 This destructor releases all the memory used by this class.
			*/
			virtual ~NetData() {if (nNodes) delete [] nNodes;};

			//Pure virtual members.
			
			/// Writes weight and biases.
			/**
			 This virtual method should be called when the calling function
			 wants to save the weights of a neural network in a medium (disk file, memory, remote server, etc)
			 that will be defined by the inherited class that implements this method.
			 @param[in] w The weights matrix, where the dimensions (w[x][y][z])are:
				- x: the layer index (where 0 is the first hidden layer).
				- y: the index of the node in layer x.
				- z: the index of the node in layer x-1.
			 @param[in] b The biases matrix, where the dimensions (b[x][y]) are:
				- x: the layer index (where 0 is the first hidden layer).
				- y: the index of the node in layer x.
			*/
			virtual void writeWeights(REAL ***w, REAL **b) = 0;
			
			/// Writes network's training information.
			/**
			 This virtual method writes results obtained during the middle of the training
			 in some kind of medium specified by the inherited class that will implement this method.
			 @param[in] epoch The epoch number.
			 @param[in] trnError The training error obtained in that epoch.
 			 @param[in] tstError The testing error obtained in that epoch.
			*/
			virtual void writeErrors(unsigned epoch, REAL trnError, REAL tstError) = 0;
			
			/// Writes an output generated by the network.
			/**
			 This method will write, onde called, the output generated by a neural network
			 during training/testing/production phase. Where the output will be written to
			 depends on the inherited class that implements this method.
			 @param[in] out A vector containing the output generated by the neural network.
			*/
			virtual void writeOutput(const REAL *out) = 0;
			
			/// Read weights values from a source.
			/**
			 This virtual method will read, once called, the weights and biases values stored
			 in some medium (disk file, remote server, memory, etc). The specific location from
			 where it will read depends on the implementation of the class that inherites this class.
			 The w and b parameters must have been previously allocated (either static or dynamically). 
			 The method MUST not allocate memory for them, this is a responsability of the calling function.
			 @param[out] w The weights matrix, where the dimensions (w[x][y][z])are:
				- x: the layer index (where 0 is the first hidden layer).
				- y: the index of the node in layer x.
				- z: the index of the node in layer x-1.
			 @param[out] b The biases matrix, where the dimensions (b[x][y]) are:
				- x: the layer index (where 0 is the first hidden layer).
				- y: the index of the node in layer x.
			*/
			virtual void readWeights(REAL ***w, REAL **b) const = 0;
	};
}

#endif
